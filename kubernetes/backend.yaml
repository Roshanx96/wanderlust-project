apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: wanderlust
  labels:
    app: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      name: backend
      labels:
        app: backend
    spec:
      # Use an initContainer to copy the image's /app into a writable volume and set ownership
      initContainers:
        - name: init-copy-app
          image: roshanx/wanderlust-backend-image:main-9
          command: ["sh", "-c", "cp -a /app/. /app-data/ && chown -R 1000:1000 /app-data || true"]
          volumeMounts:
            - name: app-data
              mountPath: /app-data
          securityContext:
            runAsUser: 0
      containers:
        - name: backend
          image: roshanx/wanderlust-backend-image:v1
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: app-data
              mountPath: /app
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
          envFrom:
            - configMapRef:
                name: backend-config
            - secretRef:
                name: backend-secret
          ports:
            - containerPort: 8080
      volumes:
        - name: app-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: wanderlust
spec:
  type: ClusterIP
  selector:
    app: backend
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      # nodePort removed because ClusterIP doesn't use nodePort; if external access required,
      # switch to NodePort and set nodePort explicitly. The frontend uses VITE_API_PATH to talk
      # to backend-service:31100; if you rely on port mapping via Service, ensure the frontend
      # config points to the service port (8080) inside cluster. Keep NodePort mapping as part
      # of ingress or service change if needed.
